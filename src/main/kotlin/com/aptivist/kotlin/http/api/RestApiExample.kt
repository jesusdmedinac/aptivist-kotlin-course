

package com.aptivist.kotlin.http.api

import com.aptivist.kotlin.http.KtorServer
import kotlinx.coroutines.*
import org.slf4j.LoggerFactory

/**
 * üéØ PHASE 3.2 - EJEMPLO COMPLETO DE API REST
 * 
 * Este archivo demuestra c√≥mo usar la API REST completa implementada:
 * ‚Ä¢ **Servidor Completo**: Integraci√≥n de todos los componentes
 * ‚Ä¢ **Ejemplos de Uso**: Demostraciones pr√°cticas de endpoints
 * ‚Ä¢ **Testing**: Ejemplos de c√≥mo probar la API
 * ‚Ä¢ **Documentaci√≥n**: Gu√≠a completa de uso
 * ‚Ä¢ **Mejores Pr√°cticas**: Patrones recomendados para APIs REST
 * 
 * PED: Este ejemplo sirve como:
 * - Punto de entrada principal para la aplicaci√≥n
 * - Documentaci√≥n ejecutable de la API
 * - Base para testing y desarrollo
 * - Referencia de integraci√≥n de componentes
 */

/**
 * PED: CLASE PRINCIPAL PARA EJECUTAR LA API REST
 * 
 * Encapsula la l√≥gica de inicio y configuraci√≥n del servidor completo.
 */
class RestApiExample {
    companion object {
        private val logger = LoggerFactory.getLogger(RestApiExample::class.java)
        
        /**
         * PED: FUNCI√ìN PRINCIPAL PARA EJECUTAR EL SERVIDOR
         * 
         * Demuestra el patr√≥n de inicializaci√≥n completa del servidor
         * con manejo de errores y shutdown elegante.
         */
        suspend fun runServer(port: Int = 8080, host: String = "0.0.0.0") {
            logger.info("üöÄ Iniciando API REST completa...")
            
            val server = KtorServer(port = port, host = host)
            
            try {
                // PED: Iniciar servidor
                server.start()
                
                // PED: Mostrar informaci√≥n de la API
                printApiDocumentation(port, host)
                
                // PED: Configurar shutdown hook para cierre elegante
                Runtime.getRuntime().addShutdownHook(Thread {
                    runBlocking {
                        logger.info("üõë Cerrando servidor...")
                        server.stop()
                        logger.info("‚úÖ Servidor cerrado exitosamente")
                    }
                })
                
                // PED: Mantener el servidor corriendo
                delay(Long.MAX_VALUE)
                
            } catch (e: Exception) {
                logger.error("‚ùå Error al ejecutar servidor: ${e.message}", e)
                throw e
            }
        }
        
        /**
         * PED: FUNCI√ìN PARA MOSTRAR DOCUMENTACI√ìN DE LA API
         * 
         * Proporciona una gu√≠a completa de todos los endpoints disponibles
         * con ejemplos de uso usando curl.
         */
        private fun printApiDocumentation(port: Int, host: String) {
            val baseUrl = "http://$host:$port"
            
            println()
            println("üéì " + "=".repeat(70))
            println("   CURSO AVANZADO DE KOTLIN - PHASE 3.2")
            println("   API REST COMPLETA CON KTOR")
            println("üéì " + "=".repeat(70))
            println()
            
            println("üåê Servidor corriendo en: $baseUrl")
            println()
            
            println("üìã ENDPOINTS B√ÅSICOS:")
            println("   GET  $baseUrl/")
            println("   GET  $baseUrl/health")
            println("   GET  $baseUrl/info")
            println()
            
            println("üîó API REST v1 - ESTADO:")
            println("   GET  $baseUrl/api/v1/state")
            println("        Obtiene el estado completo de la aplicaci√≥n")
            println("        Ejemplo: curl -X GET $baseUrl/api/v1/state")
            println()
            println("   GET  $baseUrl/api/v1/state/summary")
            println("        Obtiene un resumen del estado")
            println("        Ejemplo: curl -X GET $baseUrl/api/v1/state/summary")
            println()
            
            println("üîó API REST v1 - CONEXIONES:")
            println("   GET  $baseUrl/api/v1/connections")
            println("        Lista conexiones con paginaci√≥n")
            println("        Par√°metros: ?page=0&size=20&sort=id&direction=asc")
            println("        Ejemplo: curl -X GET '$baseUrl/api/v1/connections?page=0&size=10'")
            println()
            println("   POST $baseUrl/api/v1/connections")
            println("        Crea una nueva conexi√≥n")
            println("        Ejemplo: curl -X POST $baseUrl/api/v1/connections \\")
            println("                      -H 'Content-Type: application/json' \\")
            println("                      -d '{\"type\":\"WEBSOCKET\",\"clientInfo\":{\"userAgent\":\"Test Client\",\"version\":\"1.0.0\",\"capabilities\":[\"test\"]}}'")
            println()
            println("   GET  $baseUrl/api/v1/connections/{id}")
            println("        Obtiene una conexi√≥n espec√≠fica")
            println("        Ejemplo: curl -X GET $baseUrl/api/v1/connections/123")
            println()
            println("   DELETE $baseUrl/api/v1/connections/{id}")
            println("        Cierra una conexi√≥n")
            println("        Ejemplo: curl -X DELETE $baseUrl/api/v1/connections/123")
            println()
            
            println("üîó API REST v1 - PLUGINS:")
            println("   GET  $baseUrl/api/v1/plugins")
            println("        Lista plugins cargados")
            println("        Ejemplo: curl -X GET $baseUrl/api/v1/plugins")
            println()
            println("   POST $baseUrl/api/v1/plugins")
            println("        Carga un nuevo plugin")
            println("        Ejemplo: curl -X POST $baseUrl/api/v1/plugins \\")
            println("                      -H 'Content-Type: application/json' \\")
            println("                      -d '{\"id\":\"test-plugin\",\"version\":\"1.0.0\"}'")
            println()
            
            println("üîó API REST v1 - SERVIDOR:")
            println("   GET  $baseUrl/api/v1/server")
            println("        Informaci√≥n del servidor")
            println("        Ejemplo: curl -X GET $baseUrl/api/v1/server")
            println()
            println("   PUT  $baseUrl/api/v1/server/config")
            println("        Actualiza configuraci√≥n del servidor")
            println("        Ejemplo: curl -X PUT $baseUrl/api/v1/server/config \\")
            println("                      -H 'Content-Type: application/json' \\")
            println("                      -d '{\"maxConnections\":200,\"capabilities\":[\"tools\",\"resources\"]}'")
            println()
            
            println("üîó API REST v1 - SALUD:")
            println("   GET  $baseUrl/api/v1/health")
            println("        Health check completo")
            println("        Ejemplo: curl -X GET $baseUrl/api/v1/health")
            println()
            println("   GET  $baseUrl/api/v1/health/live")
            println("        Liveness probe (para Kubernetes)")
            println("        Ejemplo: curl -X GET $baseUrl/api/v1/health/live")
            println()
            println("   GET  $baseUrl/api/v1/health/ready")
            println("        Readiness probe (para Kubernetes)")
            println("        Ejemplo: curl -X GET $baseUrl/api/v1/health/ready")
            println()
            
            println("üîå WEBSOCKET ENDPOINTS:")
            println("   WS   $baseUrl/ws")
            println("        Endpoint general WebSocket")
            println("        Ejemplo: wscat -c ws://localhost:$port/ws")
            println()
            println("   WS   $baseUrl/mcp")
            println("        Endpoint MCP WebSocket")
            println("        Ejemplo: wscat -c ws://localhost:$port/mcp")
            println()
            println("   WS   $baseUrl/ws/test")
            println("        Endpoint de testing con comandos:")
            println("        - /ping: Test de latencia")
            println("        - /stats: Estad√≠sticas de conexiones")
            println("        - <texto>: Echo del mensaje")
            println("        Ejemplo: wscat -c ws://localhost:$port/ws/test")
            println()
            
            println("‚ú® CARACTER√çSTICAS HABILITADAS:")
            println("   ‚Ä¢ Manejo estructurado de errores con c√≥digos HTTP sem√°nticos")
            println("   ‚Ä¢ Compresi√≥n autom√°tica (gzip/deflate) para mejor performance")
            println("   ‚Ä¢ Headers de cache y seguridad autom√°ticos")
            println("   ‚Ä¢ CORS configurado para desarrollo")
            println("   ‚Ä¢ Logging estructurado con request IDs")
            println("   ‚Ä¢ Serializaci√≥n JSON autom√°tica bidireccional")
            println("   ‚Ä¢ Validaci√≥n de requests con mensajes de error detallados")
            println("   ‚Ä¢ Paginaci√≥n para endpoints que devuelven listas")
            println("   ‚Ä¢ DTOs para separar API p√∫blica del modelo interno")
            println("   ‚Ä¢ Thread safety con Mutex para estado compartido")
            println()
            
            println("üß™ EJEMPLOS DE TESTING:")
            println("   # Test b√°sico de conectividad")
            println("   curl -X GET $baseUrl/health")
            println()
            println("   # Obtener estado completo")
            println("   curl -X GET $baseUrl/api/v1/state | jq .")
            println()
            println("   # Crear una conexi√≥n de prueba")
            println("   curl -X POST $baseUrl/api/v1/connections \\")
            println("        -H 'Content-Type: application/json' \\")
            println("        -d '{\"type\":\"HTTP\",\"clientInfo\":{\"userAgent\":\"curl/7.68.0\",\"capabilities\":[\"test\"]}}' | jq .")
            println()
            println("   # Listar conexiones")
            println("   curl -X GET '$baseUrl/api/v1/connections?page=0&size=5' | jq .")
            println()
            println("   # Health check completo")
            println("   curl -X GET $baseUrl/api/v1/health | jq .")
            println()
            
            println("üìö CONCEPTOS KOTLIN DEMOSTRADOS:")
            println("   ‚Ä¢ Sealed Classes para errores type-safe")
            println("   ‚Ä¢ Extension Functions para conversiones y utilidades")
            println("   ‚Ä¢ Suspend Functions para operaciones as√≠ncronas")
            println("   ‚Ä¢ Thread Safety con Mutex y coroutines")
            println("   ‚Ä¢ DSL para routing declarativo")
            println("   ‚Ä¢ Data Classes para DTOs inmutables")
            println("   ‚Ä¢ Higher-Order Functions para transformaciones")
            println("   ‚Ä¢ Pattern Matching con when expressions")
            println("   ‚Ä¢ Plugin System para arquitectura modular")
            println("   ‚Ä¢ Content Negotiation para serializaci√≥n autom√°tica")
            println()
            
            println("‚èπÔ∏è  Presiona Ctrl+C para detener el servidor")
            println("üéì " + "=".repeat(70))
            println()
        }
    }
}

/**
 * PED: FUNCI√ìN MAIN PARA EJECUTAR EL EJEMPLO
 * 
 * Punto de entrada principal que demuestra c√≥mo iniciar
 * la API REST completa.
 */
suspend fun main() {
    try {
        RestApiExample.runServer(port = 8080, host = "0.0.0.0")
    } catch (e: Exception) {
        println("‚ùå Error fatal: ${e.message}")
        e.printStackTrace()
    }
}

/**
 * PED: FUNCI√ìN ALTERNATIVA PARA TESTING
 * 
 * Versi√≥n simplificada para usar en tests o desarrollo r√°pido.
 */
suspend fun startRestApiExample(port: Int = 8080) {
    val server = KtorServer(port = port)
    
    try {
        server.start()
        println("üåê API REST iniciada en http://localhost:$port")
        println("üìã Documentaci√≥n disponible en: http://localhost:$port/")
        
        // PED: Para testing, no mantener corriendo indefinidamente
        delay(1000) // Dar tiempo para que el servidor se inicie completamente
        
    } catch (e: Exception) {
        println("‚ùå Error al iniciar API REST: ${e.message}")
        throw e
    }
}

