
package com.aptivist.kotlin.monitoring

import io.micrometer.core.instrument.MeterRegistry
import io.micrometer.core.instrument.binder.jvm.*
import io.micrometer.core.instrument.binder.system.*
import io.micrometer.prometheus.PrometheusConfig
import io.micrometer.prometheus.PrometheusMeterRegistry
import org.slf4j.LoggerFactory

/**
 * üìä CONFIGURACI√ìN DE M√âTRICAS CON MICROMETER (Phase 4.2)
 * 
 * Esta clase demuestra conceptos avanzados de observabilidad y monitoreo en Kotlin:
 * 
 * üéØ CONCEPTOS KOTLIN DEMOSTRADOS:
 * ‚Ä¢ Object Singleton: MetricsConfig como singleton thread-safe para configuraci√≥n global
 * ‚Ä¢ Lazy Initialization: registry inicializado solo cuando se necesita
 * ‚Ä¢ Extension Functions: Funciones que extienden MeterRegistry para operaciones espec√≠ficas
 * ‚Ä¢ Higher-Order Functions: Configuraci√≥n usando lambdas para flexibilidad
 * ‚Ä¢ Companion Object: Factory methods y configuraci√≥n est√°tica
 * ‚Ä¢ Data Classes: Para configuraci√≥n inmutable de m√©tricas
 * ‚Ä¢ Sealed Classes: Para diferentes tipos de configuraci√≥n de m√©tricas
 * ‚Ä¢ Inline Functions: Para performance optimization en hot paths de m√©tricas
 * 
 * üèóÔ∏è PATRONES DE DISE√ëO:
 * ‚Ä¢ Singleton Pattern: Configuraci√≥n global de m√©tricas
 * ‚Ä¢ Factory Pattern: Creaci√≥n de registries configurados
 * ‚Ä¢ Builder Pattern: Configuraci√≥n fluida de m√©tricas
 * ‚Ä¢ Facade Pattern: Interfaz simplificada para Micrometer
 * 
 * üìà OBSERVABILIDAD:
 * ‚Ä¢ M√©tricas JVM: Memoria, GC, threads, class loading
 * ‚Ä¢ M√©tricas de sistema: CPU, disk, network
 * ‚Ä¢ M√©tricas personalizadas: Contadores, gauges, timers
 * ‚Ä¢ Prometheus integration: Export para scraping
 */

private val logger = LoggerFactory.getLogger("MetricsConfig")

/**
 * PED: Object singleton para configuraci√≥n global de m√©tricas
 * Demuestra el patr√≥n Singleton thread-safe en Kotlin usando 'object'
 */
object MetricsConfig {
    
    /**
     * PED: Lazy initialization del registry de Prometheus
     * El registry se crea solo cuando se accede por primera vez
     */
    val prometheusRegistry: PrometheusMeterRegistry by lazy {
        logger.info("üîß Inicializando Prometheus MeterRegistry...")
        
        PrometheusMeterRegistry(PrometheusConfig.DEFAULT).apply {
            // PED: apply scope function para configuraci√≥n fluida
            configureCommonTags()
            registerJvmMetrics()
            registerSystemMetrics()
            
            logger.info("‚úÖ Prometheus MeterRegistry configurado con m√©tricas JVM y sistema")
        }
    }
    
    /**
     * PED: Extension function para configurar tags comunes
     * Demuestra c√≥mo extender funcionalidad de clases existentes
     */
    private fun MeterRegistry.configureCommonTags() {
        config().commonTags(
            "application", "aptivist-kotlin-course",
            "version", "1.0-SNAPSHOT",
            "environment", System.getProperty("app.environment", "development"),
            "instance", System.getProperty("app.instance", "local")
        )
    }
    
    /**
     * PED: Extension function para registrar m√©tricas JVM
     * Usa Higher-Order Functions para configuraci√≥n flexible
     */
    private fun MeterRegistry.registerJvmMetrics() {
        // PED: listOf con lambda trailing para configuraci√≥n declarativa
        listOf(
            JvmMemoryMetrics(), // Heap, non-heap, buffer pools
            JvmGcMetrics(), // Garbage collection stats
            JvmThreadMetrics(), // Thread count, daemon threads
            JvmClassLoaderMetrics(), // Classes loaded/unloaded
            JvmCompilationMetrics() // JIT compilation time
        ).forEach { binder ->
            // PED: forEach con lambda para registro de m√©tricas
            binder.bindTo(this)
        }
    }
    
    /**
     * PED: Extension function para registrar m√©tricas del sistema
     * Demuestra composici√≥n de funcionalidad usando extension functions
     */
    private fun MeterRegistry.registerSystemMetrics() {
        listOf(
            ProcessorMetrics(), // CPU usage
            FileDescriptorMetrics(), // Open file descriptors
            UptimeMetrics(), // Application uptime
            DiskSpaceMetrics(java.io.File(".")), // Disk space usage
        ).forEach { binder ->
            binder.bindTo(this)
        }
    }
    
    /**
     * PED: Factory method usando companion object pattern
     * Crea registries configurados para diferentes prop√≥sitos
     */
    fun createCustomRegistry(configure: MeterRegistry.() -> Unit = {}): MeterRegistry {
        return PrometheusMeterRegistry(PrometheusConfig.DEFAULT).apply {
            configureCommonTags()
            configure() // PED: Higher-Order Function para configuraci√≥n personalizada
        }
    }
}

/**
 * PED: Data class para configuraci√≥n inmutable de m√©tricas personalizadas
 * Demuestra immutability y data classes para configuraci√≥n type-safe
 */
data class CustomMetricConfig(
    val name: String,
    val description: String,
    val tags: Map<String, String> = emptyMap(),
    val unit: String? = null
) {
    /**
     * PED: Validation usando require() para fail-fast behavior
     */
    init {
        require(name.isNotBlank()) { "Metric name cannot be blank" }
        require(description.isNotBlank()) { "Metric description cannot be blank" }
    }
}

/**
 * PED: Sealed class para diferentes tipos de m√©tricas
 * Demuestra type-safe configuration usando sealed classes
 */
sealed class MetricType {
    data class Counter(val config: CustomMetricConfig) : MetricType()
    data class Gauge(val config: CustomMetricConfig, val valueSupplier: () -> Double) : MetricType()
    data class Timer(val config: CustomMetricConfig) : MetricType()
    data class DistributionSummary(val config: CustomMetricConfig) : MetricType()
}

/**
 * PED: Extension functions para operaciones comunes de m√©tricas
 * Demuestra c√≥mo crear APIs fluidas usando extension functions
 */

/**
 * PED: Inline extension function para performance optimization
 * inline evita overhead de lambda en hot paths
 */
inline fun MeterRegistry.incrementCounter(name: String, vararg tags: String) {
    counter(name, *tags).increment()
}

/**
 * PED: Extension function con default parameters
 */
fun MeterRegistry.recordTimer(name: String, duration: Long, tags: Map<String, String> = emptyMap()) {
    timer(name, tags.flatMap { listOf(it.key, it.value) }.toTypedArray())
        .record(duration, java.util.concurrent.TimeUnit.MILLISECONDS)
}

/**
 * PED: Extension function usando Higher-Order Function
 * Permite medir tiempo de ejecuci√≥n de cualquier bloque de c√≥digo
 */
inline fun <T> MeterRegistry.timeExecution(name: String, block: () -> T): T {
    val timer = timer(name)
    return timer.recordCallable(block)!!
}

/**
 * PED: Builder class para configuraci√≥n fluida de m√©tricas
 * Demuestra Builder Pattern con DSL-like syntax
 */
class MetricsBuilder {
    private val metrics = mutableListOf<MetricType>()
    
    /**
     * PED: DSL function para agregar counter
     */
    fun counter(name: String, description: String, configure: CustomMetricConfig.() -> CustomMetricConfig = { this }) {
        val config = CustomMetricConfig(name, description).configure()
        metrics.add(MetricType.Counter(config))
    }
    
    /**
     * PED: DSL function para agregar gauge con lambda
     */
    fun gauge(name: String, description: String, valueSupplier: () -> Double) {
        val config = CustomMetricConfig(name, description)
        metrics.add(MetricType.Gauge(config, valueSupplier))
    }
    
    /**
     * PED: DSL function para agregar timer
     */
    fun timer(name: String, description: String) {
        val config = CustomMetricConfig(name, description)
        metrics.add(MetricType.Timer(config))
    }
    
    /**
     * PED: Function para construir y registrar todas las m√©tricas
     */
    fun build(registry: MeterRegistry) {
        metrics.forEach { metric ->
            when (metric) {
                is MetricType.Counter -> {
                    registry.counter(metric.config.name, metric.config.tags.flatMap { listOf(it.key, it.value) }.toTypedArray())
                }
                is MetricType.Gauge -> {
                    registry.gauge(metric.config.name, metric.config.tags, metric.config, { it.valueSupplier() })
                }
                is MetricType.Timer -> {
                    registry.timer(metric.config.name, metric.config.tags.flatMap { listOf(it.key, it.value) }.toTypedArray())
                }
                is MetricType.DistributionSummary -> {
                    registry.summary(metric.config.name, metric.config.tags.flatMap { listOf(it.key, it.value) }.toTypedArray())
                }
            }
        }
        
        logger.info("üìä Registradas ${metrics.size} m√©tricas personalizadas")
    }
}

/**
 * PED: DSL function para configurar m√©tricas usando Builder Pattern
 * Demuestra c√≥mo crear DSLs expresivos en Kotlin
 */
fun configureMetrics(registry: MeterRegistry = MetricsConfig.prometheusRegistry, configure: MetricsBuilder.() -> Unit) {
    val builder = MetricsBuilder()
    builder.configure()
    builder.build(registry)
}

/**
 * PED: Utility object para m√©tricas de aplicaci√≥n espec√≠ficas
 * Demuestra encapsulaci√≥n de l√≥gica de m√©tricas de dominio
 */
object ApplicationMetrics {
    private val registry = MetricsConfig.prometheusRegistry
    
    // PED: Lazy initialization de m√©tricas espec√≠ficas
    val httpRequestsTotal by lazy { 
        registry.counter("http_requests_total", "Total HTTP requests") 
    }
    
    val httpRequestDuration by lazy { 
        registry.timer("http_request_duration_seconds", "HTTP request duration") 
    }
    
    val activeConnections by lazy {
        registry.gauge("active_connections", mutableListOf<String>()) { it.size.toDouble() }
    }
    
    val databaseConnectionPool by lazy {
        registry.gauge("database_connection_pool_active", this) { 
            // PED: Placeholder para m√©tricas reales de connection pool
            kotlin.random.Random.nextDouble(0.0, 10.0)
        }
    }
    
    /**
     * PED: Function para registrar m√©tricas de negocio
     */
    fun recordBusinessMetric(operation: String, success: Boolean, duration: Long) {
        registry.incrementCounter("business_operations_total", "operation", operation, "success", success.toString())
        registry.recordTimer("business_operation_duration", duration, mapOf("operation" to operation))
    }
}
